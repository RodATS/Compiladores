Program ::=  StatmentList

TypeVar ::= ID : Type

Type ::=  int
Type ::=  str
Type ::=  [ Type ]

Block ::=  NEWLINE Statement StatementList
StatementList ::=  Statement StatementList
StatementList ::=  ε
Statement ::=  SimpleStatement NEWLINE
Statement ::=  if Expr : Block Else
Statement ::=  while Expr : Block
Statement ::=  for ID in Expr : Block
Else ::=  ε
Else ::=  else : Block
SimpleStatement ::=  Expr SSTail
SSTail ::=  ε
SSTail ::=  = Expr
Expr ::=  orExpr ExprPrime
ExprPrime ::=   if andExpr else andExpr ExprPrime
ExprPrime ::=  ε
orExpr ::=  andExpr orExprPrime
orExprPrime ::= or andExpr orExprPrime
orExprPrime ::=  ε
andExpr ::= notExpr andExprPrime
andExprPrime ::=  and notExpr andExprPrime
andExprPrime ::=  ε
notExpr ::= CompExpr notExprPrime
notExprPrime ::=  not CompExpr notExprPrime
notExprPrime ::=  ε
CompExpr ::=  IntExpr CompExprPrime
CompExprPrime ::=  CompOp IntExpr CompExprPrime
CompExprPrime ::=  ε
IntExpr ::= Term IntExprPrime
IntExprPrime ::= + Term IntExprPrime
IntExprPrime ::=  - Term IntExprPrime
IntExprPrime ::=  ε
Term ::=  Factor TermPrime
TermPrime ::= * Factor TermPrime
TermPrime ::=  // Factor TermPrime
TermPrime ::=  % Factor TermPrime
TermPrime ::=  ε
Factor ::= - Factor
Factor ::= Name
Factor ::= Literal
Factor ::= List
Factor ::=  ( Expr )
Name ::= ID NameTail
NameTail ::= ε
NameTail ::= ( ExprList )
NameTail ::= List
Literal ::=  None
Literal ::=  True
Literal ::=  False
Literal ::= INTEGER
Literal ::=  STRING
List ::= [ ExprList ]
ExprList ::= ε
ExprList ::=  Expr ExprListTail
ExprListTail ::=  ε
ExprListTail ::=  , Expr ExprListTail
CompOp ::=  == 
CompOp ::= != 
CompOp ::= < 
CompOp ::=  > 
CompOp ::=  <= 
CompOp ::=  >= 
CompOp ::=  is
