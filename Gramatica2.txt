Program ::=  StatmentList

TypeVar ::= ID : Type

Type ::=  int
Type ::=  str
Type ::=  [ Type ]

Block ::=  NEWLINE Statement StatementList
StatementList ::=  Statement StatementList
StatementList ::=  ε
Statement ::=  SimpleStatement NEWLINE
Statement ::=  if Expr : Block Else
Statement ::=  while Expr : Block
Statement ::=  for ID in Expr : Block
Else ::=  ε
Else ::=  else : Block
SimpleStatement ::=  Expr SSTail
SSTail ::= = Expr
SSTail ::= FunctionCall 
SSTail ::= ε


Expr ::=  orExpr ExprPrime
ExprPrime ::=   if andExpr else andExpr ExprPrime
ExprPrime ::=  ε
orExpr ::=  andExpr orExprPrime
orExprPrime ::= or andExpr orExprPrime
orExprPrime ::=  ε
andExpr ::= notExpr andExprPrime
andExprPrime ::=  and notExpr andExprPrime
andExprPrime ::=  ε
notExpr ::= CompExpr notExprPrime
notExprPrime ::=  not CompExpr notExprPrime
notExprPrime ::=  ε
CompExpr ::= IntExpr CompExprPrime
CompExprPrime ::= CompOp IntExpr CompExprPrime
CompExprPrime ::= ε
IntExpr ::= Factor IntExprPrime
IntExprPrime ::= + Factor IntExprPrime
IntExprPrime ::= - Factor IntExprPrime
IntExprPrime ::= ε

Factor ::= - Factor
Factor ::= Name
Factor ::= Literal
Factor ::= List
Factor ::= ( Expr )
Name ::= ID NameTail
NameTail ::= ε
NameTail ::= ( ExprList )
NameTail ::= List
Literal ::= None
Literal ::= True
Literal ::= False
Literal ::= INTEGER
Literal ::= STRING
List ::= [ ExprList ]
ExprList ::= ε
ExprList ::= Expr ExprListTail
ExprListTail ::= ε
ExprListTail ::= , Expr ExprListTail
CompOp ::= igualq
CompOp ::= difq
CompOp ::= menorq
CompOp ::= mayorq
CompOp ::= <=
CompOp ::= >=

FunctionCall ::= Funciones ( ExprList )

Funciones ::= crack  
Funciones ::= mvp          
Funciones ::= localiza          
Funciones ::= saca          
Funciones ::= wachea
